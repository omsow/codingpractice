
# Write your code here
from collections import defaultdict

def levelgraph(graph,n,x):
    visited,queue,visitor = [],[],[]
    level,lvl = 0,0
    #now root node is 1
    visited.append(1)
    queue.append((1,0)) # Adding root node in queue

    while queue : 
        #print(queue)
        s,lvl = queue.pop(0)
        if lvl > level:
            level +=1
        
        #print(s)

        for neighbour in graph[s]:
            
            if neighbour not in visited:
                visited.append(neighbour)
                #print(visited)
                visitor.append((neighbour,level+1))
                queue.append((neighbour,level+1))
                
    #print(visitor) 
    cnt = 0
    for visit in visitor :
        if visit[1] == x-1:
            cnt += 1        
    return(cnt)
#que = [1,11,2,8]-> !1 ->!11
    





n= int(input())
graph = defaultdict(list)

for i in range(n-1):
    inp = [int(j) for j in input().split()]
    inp.sort()
    
    graph[inp[0]].append(inp[1])
    graph[inp[1]].append(inp[0])

x = int(input())
#print(graph)
print(levelgraph(graph,n,x))




'''Level Nodes
SOLVED

You have been given a Tree consisting of N nodes. A tree is a fully-connected graph consisting of N nodes and

edges. The nodes in this tree are indexed from 1 to N. Consider node indexed 1 to be the root node of this tree. The root node lies at level one in the tree. You shall be given the tree and a single integer x . You need to find out the number of nodes lying on level x.

Input Format

The first line consists of a single integer N denoting the number of nodes in the tree. Each of the next n-1

lines consists of 2 integers a and b denoting an undirected edge between node a and node b. The next line consists of a single integer x.

Output Format

You need to print a single integers denoting the number of nodes on level x.'''



